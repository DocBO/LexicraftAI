{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  // Enhanced paraphrasing with literary styles\n  async advancedParaphrase(text, options) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const {\n      mode,\n      writingStyle,\n      targetAudience,\n      preserveDialogue\n    } = options;\n    let prompt = `Transform the following text with these specifications:\n    - Literary Mode: ${mode}\n    - Writing Style: ${writingStyle}\n    - Target Audience: ${targetAudience}\n    - Preserve Dialogue: ${preserveDialogue}\n    \n    Focus on:\n    1. Enhancing literary quality while maintaining meaning\n    2. Improving sentence variety and flow\n    3. Elevating vocabulary appropriately\n    4. Maintaining character voice consistency\n    \n    Text: \"${text}\"\n    \n    Provide a refined version that demonstrates mastery of the chosen style.`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Advanced paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  // Advanced grammar and style checking\n  async checkGrammarAdvanced(text, level) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let analysisDepth;\n    switch (level) {\n      case 'basic':\n        analysisDepth = 'Focus only on grammar errors and basic punctuation';\n        break;\n      case 'standard':\n        analysisDepth = 'Check grammar, punctuation, style, and clarity issues';\n        break;\n      case 'comprehensive':\n        analysisDepth = 'Comprehensive analysis including grammar, style, flow, consistency, and literary quality';\n        break;\n      case 'literary':\n        analysisDepth = 'Literary analysis focusing on creative writing, narrative voice, character consistency, and artistic expression';\n        break;\n    }\n    const prompt = `Perform a ${level} grammar and style analysis of the following text.\n    \n    ${analysisDepth}\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"overallScore\": 85,\n      \"issues\": [\n        {\n          \"type\": \"Grammar/Style/Clarity/Flow/etc\",\n          \"severity\": \"critical/major/minor\",\n          \"originalText\": \"exact text with issue\",\n          \"description\": \"explanation of the issue\",\n          \"suggestion\": \"corrected version\"\n        }\n      ],\n      \"readability\": \"Grade level or description\",\n      \"sentenceVariety\": \"Assessment of sentence structure variety\",\n      \"vocabularyLevel\": \"Assessment of vocabulary complexity\",\n      \"passiveVoiceUsage\": 15,\n      \"styleNotes\": \"Overall style assessment\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        // Fallback if JSON parsing fails\n        analysis = {\n          overallScore: 75,\n          issues: [],\n          readability: \"Analysis completed\",\n          sentenceVariety: \"Standard\",\n          vocabularyLevel: \"Appropriate\",\n          passiveVoiceUsage: 0,\n          styleNotes: response.text()\n        };\n      }\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Grammar check failed: ${error.message}`);\n    }\n  }\n\n  // Character analysis and development\n  async analyzeCharacter(text, characterName, analysisType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let analysisPrompt;\n    switch (analysisType) {\n      case 'voice':\n        analysisPrompt = 'Analyze the character\\'s unique voice, speech patterns, vocabulary, and dialogue style';\n        break;\n      case 'development':\n        analysisPrompt = 'Analyze character development, growth, motivations, and character arc';\n        break;\n      case 'consistency':\n        analysisPrompt = 'Check for consistency in character behavior, voice, and personality traits';\n        break;\n      case 'dialogue':\n        analysisPrompt = 'Focus on dialogue quality, authenticity, and character-specific speech patterns';\n        break;\n      case 'backstory':\n        analysisPrompt = 'Analyze implied backstory and suggest areas for character depth';\n        break;\n    }\n    const prompt = `Analyze the character \"${characterName}\" in the following text.\n    \n    Focus: ${analysisPrompt}\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n      \"voiceTone\": \"description of speaking style\",\n      \"speechPattern\": \"characteristic speech patterns\",\n      \"vocabularyLevel\": \"assessment of vocabulary used\",\n      \"emotionalRange\": \"range of emotions displayed\",\n      \"developmentNotes\": \"character development observations\",\n      \"inconsistencies\": [\"issue1\", \"issue2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvementAreas\": [\"area1\", \"area2\"]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        analysis = {\n          traits: [],\n          voiceTone: response.text(),\n          speechPattern: \"Analysis completed\",\n          vocabularyLevel: \"Standard\",\n          emotionalRange: \"Varied\",\n          developmentNotes: \"Character analysis completed\",\n          inconsistencies: [],\n          strengths: [],\n          improvementAreas: []\n        };\n      }\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Character analysis failed: ${error.message}`);\n    }\n  }\n\n  // Generate character enhancement suggestions\n  async generateCharacterSuggestions(characterName, traits, focusArea) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Generate creative enhancement suggestions for the character \"${characterName}\" with traits: ${traits.join(', ')}.\n    \n    Focus area: ${focusArea}\n    \n    Provide practical, creative suggestions for:\n    1. Dialogue improvements\n    2. Character depth and complexity\n    3. Backstory elements\n    4. Character relationships\n    5. Character growth opportunities\n    \n    Format as JSON array:\n    [\n      {\n        \"category\": \"Dialogue/Backstory/Development/etc\",\n        \"description\": \"detailed suggestion\",\n        \"example\": \"example implementation\"\n      }\n    ]`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let suggestions;\n      try {\n        suggestions = JSON.parse(response.text());\n      } catch {\n        suggestions = [{\n          category: \"General\",\n          description: response.text(),\n          example: \"See description above\"\n        }];\n      }\n      return {\n        success: true,\n        suggestions\n      };\n    } catch (error) {\n      throw new Error(`Character suggestions failed: ${error.message}`);\n    }\n  }\n\n  // Plot structure analysis\n  async analyzePlotStructure(text, plotType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let structureGuide;\n    switch (plotType) {\n      case 'three-act':\n        structureGuide = 'Three-Act Structure: Setup (25%), Confrontation (50%), Resolution (25%)';\n        break;\n      case 'heros-journey':\n        structureGuide = \"Hero's Journey: Ordinary World, Call to Adventure, Refusal, Meeting Mentor, Crossing Threshold, Tests, Ordeal, Reward, Road Back, Resurrection, Return\";\n        break;\n      case 'seven-point':\n        structureGuide = 'Seven-Point Structure: Hook, Plot Turn 1, Pinch Point 1, Midpoint, Pinch Point 2, Plot Turn 2, Resolution';\n        break;\n      case 'freytag':\n        structureGuide = \"Freytag's Pyramid: Exposition, Rising Action, Climax, Falling Action, Denouement\";\n        break;\n      case 'fichtean':\n        structureGuide = 'Fichtean Curve: Series of crises building to climax';\n        break;\n      default:\n        structureGuide = 'Custom analysis of narrative structure';\n    }\n    const prompt = `Analyze the plot structure of the following story using ${structureGuide}.\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"overallScore\": 85,\n      \"stages\": [\n        {\n          \"name\": \"stage name\",\n          \"completion\": 80,\n          \"description\": \"assessment of this stage\",\n          \"suggestions\": [\"improvement1\", \"improvement2\"]\n        }\n      ],\n      \"pacing\": \"assessment of story pacing\",\n      \"conflict\": \"analysis of conflict development\",\n      \"characterArc\": \"character development assessment\",\n      \"themeDevelopment\": \"theme analysis\",\n      \"recommendations\": [\n        {\n          \"priority\": \"high/medium/low\",\n          \"title\": \"recommendation title\",\n          \"description\": \"detailed recommendation\"\n        }\n      ]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        analysis = {\n          overallScore: 75,\n          stages: [],\n          pacing: response.text(),\n          conflict: \"Analysis completed\",\n          characterArc: \"Standard development\",\n          themeDevelopment: \"Themes present\",\n          recommendations: []\n        };\n      }\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Plot analysis failed: ${error.message}`);\n    }\n  }\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points and important information: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail, description, and elaboration: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text();\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details of the following text: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze the tone of the following text and provide insights about:\n    1. Overall tone (formal, casual, optimistic, pessimistic, etc.)\n    2. Emotional sentiment (positive, negative, neutral)\n    3. Confidence level (high, medium, low)\n    4. Suggestions for improvement if needed\n    \n    Text: \"${text}\"\n    \n    Please format your response as JSON with the following structure:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\",\n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysisText = response.text();\n\n      // Try to parse JSON, fallback to text if parsing fails\n      let analysis;\n      try {\n        analysis = JSON.parse(analysisText);\n      } catch {\n        analysis = {\n          overallTone: analysisText,\n          sentiment: \"neutral\",\n          confidence: \"medium\",\n          emotions: [],\n          suggestions: \"Analysis completed\"\n        };\n      }\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in the context: \"${context}\". \n    Return only a JSON array of synonyms, ordered by relevance.`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const synonymsText = response.text();\n      let synonyms;\n      try {\n        synonyms = JSON.parse(synonymsText);\n      } catch {\n        synonyms = synonymsText.split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n      return {\n        success: true,\n        synonyms\n      };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Make the following AI-generated text sound more natural and human-written by:\n    1. Adding natural flow and rhythm\n    2. Including subtle imperfections that humans naturally have\n    3. Making it more conversational and relatable\n    4. Removing overly formal or robotic language\n    \n    Text: \"${text}\"`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text()\n      };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\nexport const geminiService = new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","genAI","setApiKey","apiKey","advancedParaphrase","text","options","Error","mode","writingStyle","targetAudience","preserveDialogue","prompt","model","getGenerativeModel","result","generateContent","response","success","originalLength","length","newLength","error","message","checkGrammarAdvanced","level","analysisDepth","analysis","JSON","parse","overallScore","issues","readability","sentenceVariety","vocabularyLevel","passiveVoiceUsage","styleNotes","analyzeCharacter","characterName","analysisType","analysisPrompt","traits","voiceTone","speechPattern","emotionalRange","developmentNotes","inconsistencies","strengths","improvementAreas","generateCharacterSuggestions","focusArea","join","suggestions","category","description","example","analyzePlotStructure","plotType","structureGuide","stages","pacing","conflict","characterArc","themeDevelopment","recommendations","paraphraseText","customPrompt","paraphrasedText","summarizeText","summary","summaryLength","compressionRatio","toFixed","analyzeTone","analysisText","overallTone","sentiment","confidence","emotions","getSynonyms","word","context","synonymsText","synonyms","split","map","s","trim","replace","slice","humanizeText","geminiService"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/services/geminiAPI.js"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\n\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  // Enhanced paraphrasing with literary styles\n  async advancedParaphrase(text, options) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const { mode, writingStyle, targetAudience, preserveDialogue } = options;\n    \n    let prompt = `Transform the following text with these specifications:\n    - Literary Mode: ${mode}\n    - Writing Style: ${writingStyle}\n    - Target Audience: ${targetAudience}\n    - Preserve Dialogue: ${preserveDialogue}\n    \n    Focus on:\n    1. Enhancing literary quality while maintaining meaning\n    2. Improving sentence variety and flow\n    3. Elevating vocabulary appropriately\n    4. Maintaining character voice consistency\n    \n    Text: \"${text}\"\n    \n    Provide a refined version that demonstrates mastery of the chosen style.`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      return {\n        success: true,\n        result: response.text(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Advanced paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  // Advanced grammar and style checking\n  async checkGrammarAdvanced(text, level) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let analysisDepth;\n    switch (level) {\n      case 'basic':\n        analysisDepth = 'Focus only on grammar errors and basic punctuation';\n        break;\n      case 'standard':\n        analysisDepth = 'Check grammar, punctuation, style, and clarity issues';\n        break;\n      case 'comprehensive':\n        analysisDepth = 'Comprehensive analysis including grammar, style, flow, consistency, and literary quality';\n        break;\n      case 'literary':\n        analysisDepth = 'Literary analysis focusing on creative writing, narrative voice, character consistency, and artistic expression';\n        break;\n    }\n\n    const prompt = `Perform a ${level} grammar and style analysis of the following text.\n    \n    ${analysisDepth}\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"overallScore\": 85,\n      \"issues\": [\n        {\n          \"type\": \"Grammar/Style/Clarity/Flow/etc\",\n          \"severity\": \"critical/major/minor\",\n          \"originalText\": \"exact text with issue\",\n          \"description\": \"explanation of the issue\",\n          \"suggestion\": \"corrected version\"\n        }\n      ],\n      \"readability\": \"Grade level or description\",\n      \"sentenceVariety\": \"Assessment of sentence structure variety\",\n      \"vocabularyLevel\": \"Assessment of vocabulary complexity\",\n      \"passiveVoiceUsage\": 15,\n      \"styleNotes\": \"Overall style assessment\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        // Fallback if JSON parsing fails\n        analysis = {\n          overallScore: 75,\n          issues: [],\n          readability: \"Analysis completed\",\n          sentenceVariety: \"Standard\",\n          vocabularyLevel: \"Appropriate\",\n          passiveVoiceUsage: 0,\n          styleNotes: response.text()\n        };\n      }\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Grammar check failed: ${error.message}`);\n    }\n  }\n\n  // Character analysis and development\n  async analyzeCharacter(text, characterName, analysisType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let analysisPrompt;\n    switch (analysisType) {\n      case 'voice':\n        analysisPrompt = 'Analyze the character\\'s unique voice, speech patterns, vocabulary, and dialogue style';\n        break;\n      case 'development':\n        analysisPrompt = 'Analyze character development, growth, motivations, and character arc';\n        break;\n      case 'consistency':\n        analysisPrompt = 'Check for consistency in character behavior, voice, and personality traits';\n        break;\n      case 'dialogue':\n        analysisPrompt = 'Focus on dialogue quality, authenticity, and character-specific speech patterns';\n        break;\n      case 'backstory':\n        analysisPrompt = 'Analyze implied backstory and suggest areas for character depth';\n        break;\n    }\n\n    const prompt = `Analyze the character \"${characterName}\" in the following text.\n    \n    Focus: ${analysisPrompt}\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n      \"voiceTone\": \"description of speaking style\",\n      \"speechPattern\": \"characteristic speech patterns\",\n      \"vocabularyLevel\": \"assessment of vocabulary used\",\n      \"emotionalRange\": \"range of emotions displayed\",\n      \"developmentNotes\": \"character development observations\",\n      \"inconsistencies\": [\"issue1\", \"issue2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvementAreas\": [\"area1\", \"area2\"]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        analysis = {\n          traits: [],\n          voiceTone: response.text(),\n          speechPattern: \"Analysis completed\",\n          vocabularyLevel: \"Standard\",\n          emotionalRange: \"Varied\",\n          developmentNotes: \"Character analysis completed\",\n          inconsistencies: [],\n          strengths: [],\n          improvementAreas: []\n        };\n      }\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Character analysis failed: ${error.message}`);\n    }\n  }\n\n  // Generate character enhancement suggestions\n  async generateCharacterSuggestions(characterName, traits, focusArea) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Generate creative enhancement suggestions for the character \"${characterName}\" with traits: ${traits.join(', ')}.\n    \n    Focus area: ${focusArea}\n    \n    Provide practical, creative suggestions for:\n    1. Dialogue improvements\n    2. Character depth and complexity\n    3. Backstory elements\n    4. Character relationships\n    5. Character growth opportunities\n    \n    Format as JSON array:\n    [\n      {\n        \"category\": \"Dialogue/Backstory/Development/etc\",\n        \"description\": \"detailed suggestion\",\n        \"example\": \"example implementation\"\n      }\n    ]`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let suggestions;\n      try {\n        suggestions = JSON.parse(response.text());\n      } catch {\n        suggestions = [\n          {\n            category: \"General\",\n            description: response.text(),\n            example: \"See description above\"\n          }\n        ];\n      }\n\n      return { success: true, suggestions };\n    } catch (error) {\n      throw new Error(`Character suggestions failed: ${error.message}`);\n    }\n  }\n\n  // Plot structure analysis\n  async analyzePlotStructure(text, plotType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let structureGuide;\n    switch (plotType) {\n      case 'three-act':\n        structureGuide = 'Three-Act Structure: Setup (25%), Confrontation (50%), Resolution (25%)';\n        break;\n      case 'heros-journey':\n        structureGuide = \"Hero's Journey: Ordinary World, Call to Adventure, Refusal, Meeting Mentor, Crossing Threshold, Tests, Ordeal, Reward, Road Back, Resurrection, Return\";\n        break;\n      case 'seven-point':\n        structureGuide = 'Seven-Point Structure: Hook, Plot Turn 1, Pinch Point 1, Midpoint, Pinch Point 2, Plot Turn 2, Resolution';\n        break;\n      case 'freytag':\n        structureGuide = \"Freytag's Pyramid: Exposition, Rising Action, Climax, Falling Action, Denouement\";\n        break;\n      case 'fichtean':\n        structureGuide = 'Fichtean Curve: Series of crises building to climax';\n        break;\n      default:\n        structureGuide = 'Custom analysis of narrative structure';\n    }\n\n    const prompt = `Analyze the plot structure of the following story using ${structureGuide}.\n    \n    Text: \"${text}\"\n    \n    Provide analysis in this JSON format:\n    {\n      \"overallScore\": 85,\n      \"stages\": [\n        {\n          \"name\": \"stage name\",\n          \"completion\": 80,\n          \"description\": \"assessment of this stage\",\n          \"suggestions\": [\"improvement1\", \"improvement2\"]\n        }\n      ],\n      \"pacing\": \"assessment of story pacing\",\n      \"conflict\": \"analysis of conflict development\",\n      \"characterArc\": \"character development assessment\",\n      \"themeDevelopment\": \"theme analysis\",\n      \"recommendations\": [\n        {\n          \"priority\": \"high/medium/low\",\n          \"title\": \"recommendation title\",\n          \"description\": \"detailed recommendation\"\n        }\n      ]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let analysis;\n      try {\n        analysis = JSON.parse(response.text());\n      } catch {\n        analysis = {\n          overallScore: 75,\n          stages: [],\n          pacing: response.text(),\n          conflict: \"Analysis completed\",\n          characterArc: \"Standard development\",\n          themeDevelopment: \"Themes present\",\n          recommendations: []\n        };\n      }\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Plot analysis failed: ${error.message}`);\n    }\n  }\n\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points and important information: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail, description, and elaboration: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text();\n\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details of the following text: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze the tone of the following text and provide insights about:\n    1. Overall tone (formal, casual, optimistic, pessimistic, etc.)\n    2. Emotional sentiment (positive, negative, neutral)\n    3. Confidence level (high, medium, low)\n    4. Suggestions for improvement if needed\n    \n    Text: \"${text}\"\n    \n    Please format your response as JSON with the following structure:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\",\n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysisText = response.text();\n      \n      // Try to parse JSON, fallback to text if parsing fails\n      let analysis;\n      try {\n        analysis = JSON.parse(analysisText);\n      } catch {\n        analysis = {\n          overallTone: analysisText,\n          sentiment: \"neutral\",\n          confidence: \"medium\",\n          emotions: [],\n          suggestions: \"Analysis completed\"\n        };\n      }\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in the context: \"${context}\". \n    Return only a JSON array of synonyms, ordered by relevance.`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const synonymsText = response.text();\n      \n      let synonyms;\n      try {\n        synonyms = JSON.parse(synonymsText);\n      } catch {\n        synonyms = synonymsText.split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n\n      return { success: true, synonyms };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Make the following AI-generated text sound more natural and human-written by:\n    1. Adding natural flow and rhythm\n    2. Including subtle imperfections that humans naturally have\n    3. Making it more conversational and relatable\n    4. Removing overly formal or robotic language\n    \n    Text: \"${text}\"`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return { success: true, result: response.text() };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}