{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  // Helper function to clean and parse AI responses\n  cleanAndParseResponse(responseText) {\n    // Remove markdown code blocks\n    let cleanText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '');\n\n    // Try to extract JSON from the response\n    const jsonMatch = cleanText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      try {\n        return JSON.parse(jsonMatch[0]);\n      } catch (e) {\n        console.warn('Failed to parse JSON:', e);\n        return null;\n      }\n    }\n    return null;\n  }\n\n  // Enhanced paraphrasing with literary styles\n  async advancedParaphrase(text, options) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const {\n      mode,\n      writingStyle,\n      targetAudience,\n      preserveDialogue\n    } = options;\n    let prompt = `Transform the following text with these specifications:\n    - Literary Mode: ${mode}\n    - Writing Style: ${writingStyle}\n    - Target Audience: ${targetAudience}\n    - Preserve Dialogue: ${preserveDialogue}\n    \n    Focus on:\n    1. Enhancing literary quality while maintaining meaning\n    2. Improving sentence variety and flow\n    3. Elevating vocabulary appropriately\n    4. Maintaining character voice consistency\n    \n    Text: \"${text}\"\n    \n    Provide ONLY the refined version without any explanations or formatting.`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text().trim(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Advanced paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  // Advanced grammar and style checking\n  async checkGrammarAdvanced(text, level) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let analysisDepth;\n    switch (level) {\n      case 'basic':\n        analysisDepth = 'Focus only on grammar errors and basic punctuation';\n        break;\n      case 'standard':\n        analysisDepth = 'Check grammar, punctuation, style, and clarity issues';\n        break;\n      case 'comprehensive':\n        analysisDepth = 'Comprehensive analysis including grammar, style, flow, consistency, and literary quality';\n        break;\n      case 'literary':\n        analysisDepth = 'Literary analysis focusing on creative writing, narrative voice, character consistency, and artistic expression';\n        break;\n    }\n    const prompt = `Perform a ${level} grammar and style analysis of the following text.\n    \n    ${analysisDepth}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallScore\": 85,\n      \"issues\": [\n        {\n          \"type\": \"Grammar\",\n          \"severity\": \"critical\",\n          \"originalText\": \"exact text with issue\",\n          \"description\": \"explanation of the issue\",\n          \"suggestion\": \"corrected version\"\n        }\n      ],\n      \"readability\": \"Grade level or description\",\n      \"sentenceVariety\": \"Assessment of sentence structure variety\",\n      \"vocabularyLevel\": \"Assessment of vocabulary complexity\",\n      \"passiveVoiceUsage\": 15,\n      \"styleNotes\": \"Overall style assessment\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallScore: 75,\n        issues: [],\n        readability: \"Analysis completed successfully\",\n        sentenceVariety: \"Standard variety observed\",\n        vocabularyLevel: \"Appropriate for intended audience\",\n        passiveVoiceUsage: 0,\n        styleNotes: \"Text analyzed for style and structure\"\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Grammar check failed: ${error.message}`);\n    }\n  }\n\n  // Character analysis and development\n  async analyzeCharacter(text, characterName, analysisType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let analysisPrompt;\n    switch (analysisType) {\n      case 'voice':\n        analysisPrompt = 'Analyze the character\\'s unique voice, speech patterns, vocabulary, and dialogue style';\n        break;\n      case 'development':\n        analysisPrompt = 'Analyze character development, growth, motivations, and character arc';\n        break;\n      case 'consistency':\n        analysisPrompt = 'Check for consistency in character behavior, voice, and personality traits';\n        break;\n      case 'dialogue':\n        analysisPrompt = 'Focus on dialogue quality, authenticity, and character-specific speech patterns';\n        break;\n      case 'backstory':\n        analysisPrompt = 'Analyze implied backstory and suggest areas for character depth';\n        break;\n    }\n    const prompt = `Analyze the character \"${characterName}\" in the following text.\n    \n    Focus: ${analysisPrompt}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n      \"voiceTone\": \"description of speaking style\",\n      \"speechPattern\": \"characteristic speech patterns\",\n      \"vocabularyLevel\": \"assessment of vocabulary used\",\n      \"emotionalRange\": \"range of emotions displayed\",\n      \"developmentNotes\": \"character development observations\",\n      \"inconsistencies\": [\"issue1\", \"issue2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvementAreas\": [\"area1\", \"area2\"]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        traits: [\"Character analyzed\"],\n        voiceTone: \"Analysis completed successfully\",\n        speechPattern: \"Patterns identified\",\n        vocabularyLevel: \"Appropriate level\",\n        emotionalRange: \"Emotions observed\",\n        developmentNotes: \"Character development noted\",\n        inconsistencies: [],\n        strengths: [\"Character strengths identified\"],\n        improvementAreas: [\"Areas for development noted\"]\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Character analysis failed: ${error.message}`);\n    }\n  }\n\n  // Generate character enhancement suggestions\n  async generateCharacterSuggestions(characterName, traits, focusArea) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Generate creative enhancement suggestions for the character \"${characterName}\" with traits: ${traits.join(', ')}.\n    \n    Focus area: ${focusArea}\n    \n    Provide practical, creative suggestions for character development.\n    \n    Respond with ONLY a valid JSON array (no markdown formatting) in this exact format:\n    [\n      {\n        \"category\": \"Dialogue\",\n        \"description\": \"detailed suggestion\",\n        \"example\": \"example implementation\"\n      }\n    ]`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let suggestions = this.cleanAndParseResponse(response.text());\n      if (!Array.isArray(suggestions)) {\n        suggestions = [{\n          category: \"General Development\",\n          description: \"Character enhancement suggestions generated\",\n          example: \"See detailed analysis for specific recommendations\"\n        }];\n      }\n      return {\n        success: true,\n        suggestions\n      };\n    } catch (error) {\n      throw new Error(`Character suggestions failed: ${error.message}`);\n    }\n  }\n\n  // Plot structure analysis\n  async analyzePlotStructure(text, plotType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let structureGuide;\n    switch (plotType) {\n      case 'three-act':\n        structureGuide = 'Three-Act Structure: Setup (25%), Confrontation (50%), Resolution (25%)';\n        break;\n      case 'heros-journey':\n        structureGuide = \"Hero's Journey: Ordinary World, Call to Adventure, Refusal, Meeting Mentor, Crossing Threshold, Tests, Ordeal, Reward, Road Back, Resurrection, Return\";\n        break;\n      case 'seven-point':\n        structureGuide = 'Seven-Point Structure: Hook, Plot Turn 1, Pinch Point 1, Midpoint, Pinch Point 2, Plot Turn 2, Resolution';\n        break;\n      case 'freytag':\n        structureGuide = \"Freytag's Pyramid: Exposition, Rising Action, Climax, Falling Action, Denouement\";\n        break;\n      case 'fichtean':\n        structureGuide = 'Fichtean Curve: Series of crises building to climax';\n        break;\n      default:\n        structureGuide = 'Custom analysis of narrative structure';\n    }\n    const prompt = `Analyze the plot structure of the following story using ${structureGuide}.\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallScore\": 85,\n      \"stages\": [\n        {\n          \"name\": \"stage name\",\n          \"completion\": 80,\n          \"description\": \"assessment of this stage\",\n          \"suggestions\": [\"improvement1\", \"improvement2\"]\n        }\n      ],\n      \"pacing\": \"assessment of story pacing\",\n      \"conflict\": \"analysis of conflict development\",\n      \"characterArc\": \"character development assessment\",\n      \"themeDevelopment\": \"theme analysis\",\n      \"recommendations\": [\n        {\n          \"priority\": \"high\",\n          \"title\": \"recommendation title\",\n          \"description\": \"detailed recommendation\"\n        }\n      ]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallScore: 75,\n        stages: [{\n          name: \"Structure Analysis\",\n          completion: 75,\n          description: \"Plot structure analyzed successfully\",\n          suggestions: [\"Continue developing your story structure\"]\n        }],\n        pacing: \"Pacing analysis completed\",\n        conflict: \"Conflict development noted\",\n        characterArc: \"Character development observed\",\n        themeDevelopment: \"Themes identified\",\n        recommendations: [{\n          priority: \"medium\",\n          title: \"General Development\",\n          description: \"Continue refining your plot structure\"\n        }]\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Plot analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Manuscript Manager\n  async analyzeManuscript(chapters) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze this manuscript structure and provide insights:\n    \n    Chapters: ${JSON.stringify(chapters)}\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallProgress\": 65,\n      \"totalWordCount\": 50000,\n      \"averageChapterLength\": 2500,\n      \"paceAnalysis\": \"analysis of pacing across chapters\",\n      \"consistencyIssues\": [\"issue1\", \"issue2\"],\n      \"suggestions\": [\"suggestion1\", \"suggestion2\"],\n      \"readabilityScore\": 85,\n      \"chapterInsights\": [\n        {\n          \"chapterNumber\": 1,\n          \"strengths\": [\"strength1\"],\n          \"improvements\": [\"improvement1\"],\n          \"paceRating\": \"good\"\n        }\n      ]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallProgress: 0,\n        totalWordCount: 0,\n        averageChapterLength: 0,\n        paceAnalysis: \"Analysis in progress\",\n        consistencyIssues: [],\n        suggestions: [\"Continue writing your manuscript\"],\n        readabilityScore: 75,\n        chapterInsights: []\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Manuscript analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Scene Builder\n  async analyzeScene(sceneText, sceneType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze this scene for conflict, tension, and effectiveness:\n    \n    Scene Type: ${sceneType}\n    Scene Text: \"${sceneText}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"conflictLevel\": 85,\n      \"tensionRating\": 90,\n      \"paceRating\": 75,\n      \"dialogueQuality\": 80,\n      \"characterDevelopment\": 70,\n      \"conflictTypes\": [\"internal\", \"external\"],\n      \"tensionTechniques\": [\"technique1\", \"technique2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvements\": [\"improvement1\", \"improvement2\"],\n      \"suggestions\": [\n        {\n          \"type\": \"Conflict\",\n          \"description\": \"suggestion description\",\n          \"example\": \"example implementation\"\n        }\n      ]\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        conflictLevel: 50,\n        tensionRating: 50,\n        paceRating: 50,\n        dialogueQuality: 50,\n        characterDevelopment: 50,\n        conflictTypes: [\"general\"],\n        tensionTechniques: [\"basic tension\"],\n        strengths: [\"Scene analyzed\"],\n        improvements: [\"Continue developing\"],\n        suggestions: [{\n          type: \"General\",\n          description: \"Scene analysis completed\",\n          example: \"Continue refining your scene\"\n        }]\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Scene analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Readability Optimizer\n  async analyzeReadability(text, targetAudience) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze the readability of this text for target audience: ${targetAudience}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"readabilityScore\": 85,\n      \"gradeLevel\": \"8th Grade\",\n      \"targetMatch\": true,\n      \"wordComplexity\": \"appropriate\",\n      \"sentenceLength\": \"good\",\n      \"vocabularyLevel\": \"suitable\",\n      \"improvements\": [\n        {\n          \"issue\": \"issue description\",\n          \"suggestion\": \"how to fix\",\n          \"example\": \"example fix\"\n        }\n      ],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"optimizedVersion\": \"optimized text version\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        readabilityScore: 75,\n        gradeLevel: \"General Adult\",\n        targetMatch: true,\n        wordComplexity: \"appropriate\",\n        sentenceLength: \"good\",\n        vocabularyLevel: \"suitable\",\n        improvements: [{\n          issue: \"Analysis completed\",\n          suggestion: \"Continue refining text\",\n          example: \"Keep developing your writing\"\n        }],\n        strengths: [\"Text analyzed successfully\"],\n        optimizedVersion: text\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Readability analysis failed: ${error.message}`);\n    }\n  }\n\n  // Existing methods with improved response handling...\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning. Provide ONLY the rewritten text without explanations: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology. Provide ONLY the rewritten text: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand. Provide ONLY the simplified text: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style. Provide ONLY the creative version: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points. Provide ONLY the shortened text: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail and elaboration. Provide ONLY the expanded text: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}. Provide ONLY the result: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text. Provide ONLY the paraphrased version: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text().trim();\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text. Provide ONLY the summary: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details. Provide ONLY the summary: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text. Provide ONLY the summary: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text().trim();\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze the tone of the following text.\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive\",\n      \"confidence\": \"high\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallTone: \"Neutral tone detected\",\n        sentiment: \"neutral\",\n        confidence: \"medium\",\n        emotions: [\"general\"],\n        suggestions: \"Tone analysis completed successfully\"\n      };\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in this context: \"${context}\". \n    Return ONLY a JSON array of synonyms: [\"synonym1\", \"synonym2\", \"synonym3\", \"synonym4\", \"synonym5\", \"synonym6\", \"synonym7\", \"synonym8\"]`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      let synonyms = this.cleanAndParseResponse(response.text());\n      if (!Array.isArray(synonyms)) {\n        synonyms = response.text().split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n      return {\n        success: true,\n        synonyms\n      };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Make the following AI-generated text sound more natural and human-written. Provide ONLY the humanized version without explanations:\n    \n    Text: \"${text}\"`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text().trim()\n      };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\nexport const geminiService = new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","genAI","setApiKey","apiKey","cleanAndParseResponse","responseText","cleanText","replace","jsonMatch","match","JSON","parse","e","console","warn","advancedParaphrase","text","options","Error","mode","writingStyle","targetAudience","preserveDialogue","prompt","model","getGenerativeModel","result","generateContent","response","success","trim","originalLength","length","newLength","error","message","checkGrammarAdvanced","level","analysisDepth","analysis","overallScore","issues","readability","sentenceVariety","vocabularyLevel","passiveVoiceUsage","styleNotes","analyzeCharacter","characterName","analysisType","analysisPrompt","traits","voiceTone","speechPattern","emotionalRange","developmentNotes","inconsistencies","strengths","improvementAreas","generateCharacterSuggestions","focusArea","join","suggestions","Array","isArray","category","description","example","analyzePlotStructure","plotType","structureGuide","stages","name","completion","pacing","conflict","characterArc","themeDevelopment","recommendations","priority","title","analyzeManuscript","chapters","stringify","overallProgress","totalWordCount","averageChapterLength","paceAnalysis","consistencyIssues","readabilityScore","chapterInsights","analyzeScene","sceneText","sceneType","conflictLevel","tensionRating","paceRating","dialogueQuality","characterDevelopment","conflictTypes","tensionTechniques","improvements","type","analyzeReadability","gradeLevel","targetMatch","wordComplexity","sentenceLength","issue","suggestion","optimizedVersion","paraphraseText","customPrompt","paraphrasedText","summarizeText","summary","summaryLength","compressionRatio","toFixed","analyzeTone","overallTone","sentiment","confidence","emotions","getSynonyms","word","context","synonyms","split","map","s","slice","humanizeText","geminiService"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/services/geminiAPI.js"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\n\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  // Helper function to clean and parse AI responses\n  cleanAndParseResponse(responseText) {\n    // Remove markdown code blocks\n    let cleanText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '');\n    \n    // Try to extract JSON from the response\n    const jsonMatch = cleanText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      try {\n        return JSON.parse(jsonMatch[0]);\n      } catch (e) {\n        console.warn('Failed to parse JSON:', e);\n        return null;\n      }\n    }\n    return null;\n  }\n\n  // Enhanced paraphrasing with literary styles\n  async advancedParaphrase(text, options) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const { mode, writingStyle, targetAudience, preserveDialogue } = options;\n    \n    let prompt = `Transform the following text with these specifications:\n    - Literary Mode: ${mode}\n    - Writing Style: ${writingStyle}\n    - Target Audience: ${targetAudience}\n    - Preserve Dialogue: ${preserveDialogue}\n    \n    Focus on:\n    1. Enhancing literary quality while maintaining meaning\n    2. Improving sentence variety and flow\n    3. Elevating vocabulary appropriately\n    4. Maintaining character voice consistency\n    \n    Text: \"${text}\"\n    \n    Provide ONLY the refined version without any explanations or formatting.`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      return {\n        success: true,\n        result: response.text().trim(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Advanced paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  // Advanced grammar and style checking\n  async checkGrammarAdvanced(text, level) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let analysisDepth;\n    switch (level) {\n      case 'basic':\n        analysisDepth = 'Focus only on grammar errors and basic punctuation';\n        break;\n      case 'standard':\n        analysisDepth = 'Check grammar, punctuation, style, and clarity issues';\n        break;\n      case 'comprehensive':\n        analysisDepth = 'Comprehensive analysis including grammar, style, flow, consistency, and literary quality';\n        break;\n      case 'literary':\n        analysisDepth = 'Literary analysis focusing on creative writing, narrative voice, character consistency, and artistic expression';\n        break;\n    }\n\n    const prompt = `Perform a ${level} grammar and style analysis of the following text.\n    \n    ${analysisDepth}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallScore\": 85,\n      \"issues\": [\n        {\n          \"type\": \"Grammar\",\n          \"severity\": \"critical\",\n          \"originalText\": \"exact text with issue\",\n          \"description\": \"explanation of the issue\",\n          \"suggestion\": \"corrected version\"\n        }\n      ],\n      \"readability\": \"Grade level or description\",\n      \"sentenceVariety\": \"Assessment of sentence structure variety\",\n      \"vocabularyLevel\": \"Assessment of vocabulary complexity\",\n      \"passiveVoiceUsage\": 15,\n      \"styleNotes\": \"Overall style assessment\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallScore: 75,\n        issues: [],\n        readability: \"Analysis completed successfully\",\n        sentenceVariety: \"Standard variety observed\",\n        vocabularyLevel: \"Appropriate for intended audience\",\n        passiveVoiceUsage: 0,\n        styleNotes: \"Text analyzed for style and structure\"\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Grammar check failed: ${error.message}`);\n    }\n  }\n\n  // Character analysis and development\n  async analyzeCharacter(text, characterName, analysisType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let analysisPrompt;\n    switch (analysisType) {\n      case 'voice':\n        analysisPrompt = 'Analyze the character\\'s unique voice, speech patterns, vocabulary, and dialogue style';\n        break;\n      case 'development':\n        analysisPrompt = 'Analyze character development, growth, motivations, and character arc';\n        break;\n      case 'consistency':\n        analysisPrompt = 'Check for consistency in character behavior, voice, and personality traits';\n        break;\n      case 'dialogue':\n        analysisPrompt = 'Focus on dialogue quality, authenticity, and character-specific speech patterns';\n        break;\n      case 'backstory':\n        analysisPrompt = 'Analyze implied backstory and suggest areas for character depth';\n        break;\n    }\n\n    const prompt = `Analyze the character \"${characterName}\" in the following text.\n    \n    Focus: ${analysisPrompt}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n      \"voiceTone\": \"description of speaking style\",\n      \"speechPattern\": \"characteristic speech patterns\",\n      \"vocabularyLevel\": \"assessment of vocabulary used\",\n      \"emotionalRange\": \"range of emotions displayed\",\n      \"developmentNotes\": \"character development observations\",\n      \"inconsistencies\": [\"issue1\", \"issue2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvementAreas\": [\"area1\", \"area2\"]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        traits: [\"Character analyzed\"],\n        voiceTone: \"Analysis completed successfully\",\n        speechPattern: \"Patterns identified\",\n        vocabularyLevel: \"Appropriate level\",\n        emotionalRange: \"Emotions observed\",\n        developmentNotes: \"Character development noted\",\n        inconsistencies: [],\n        strengths: [\"Character strengths identified\"],\n        improvementAreas: [\"Areas for development noted\"]\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Character analysis failed: ${error.message}`);\n    }\n  }\n\n  // Generate character enhancement suggestions\n  async generateCharacterSuggestions(characterName, traits, focusArea) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Generate creative enhancement suggestions for the character \"${characterName}\" with traits: ${traits.join(', ')}.\n    \n    Focus area: ${focusArea}\n    \n    Provide practical, creative suggestions for character development.\n    \n    Respond with ONLY a valid JSON array (no markdown formatting) in this exact format:\n    [\n      {\n        \"category\": \"Dialogue\",\n        \"description\": \"detailed suggestion\",\n        \"example\": \"example implementation\"\n      }\n    ]`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let suggestions = this.cleanAndParseResponse(response.text());\n      if (!Array.isArray(suggestions)) {\n        suggestions = [\n          {\n            category: \"General Development\",\n            description: \"Character enhancement suggestions generated\",\n            example: \"See detailed analysis for specific recommendations\"\n          }\n        ];\n      }\n\n      return { success: true, suggestions };\n    } catch (error) {\n      throw new Error(`Character suggestions failed: ${error.message}`);\n    }\n  }\n\n  // Plot structure analysis\n  async analyzePlotStructure(text, plotType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let structureGuide;\n    switch (plotType) {\n      case 'three-act':\n        structureGuide = 'Three-Act Structure: Setup (25%), Confrontation (50%), Resolution (25%)';\n        break;\n      case 'heros-journey':\n        structureGuide = \"Hero's Journey: Ordinary World, Call to Adventure, Refusal, Meeting Mentor, Crossing Threshold, Tests, Ordeal, Reward, Road Back, Resurrection, Return\";\n        break;\n      case 'seven-point':\n        structureGuide = 'Seven-Point Structure: Hook, Plot Turn 1, Pinch Point 1, Midpoint, Pinch Point 2, Plot Turn 2, Resolution';\n        break;\n      case 'freytag':\n        structureGuide = \"Freytag's Pyramid: Exposition, Rising Action, Climax, Falling Action, Denouement\";\n        break;\n      case 'fichtean':\n        structureGuide = 'Fichtean Curve: Series of crises building to climax';\n        break;\n      default:\n        structureGuide = 'Custom analysis of narrative structure';\n    }\n\n    const prompt = `Analyze the plot structure of the following story using ${structureGuide}.\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallScore\": 85,\n      \"stages\": [\n        {\n          \"name\": \"stage name\",\n          \"completion\": 80,\n          \"description\": \"assessment of this stage\",\n          \"suggestions\": [\"improvement1\", \"improvement2\"]\n        }\n      ],\n      \"pacing\": \"assessment of story pacing\",\n      \"conflict\": \"analysis of conflict development\",\n      \"characterArc\": \"character development assessment\",\n      \"themeDevelopment\": \"theme analysis\",\n      \"recommendations\": [\n        {\n          \"priority\": \"high\",\n          \"title\": \"recommendation title\",\n          \"description\": \"detailed recommendation\"\n        }\n      ]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallScore: 75,\n        stages: [\n          {\n            name: \"Structure Analysis\",\n            completion: 75,\n            description: \"Plot structure analyzed successfully\",\n            suggestions: [\"Continue developing your story structure\"]\n          }\n        ],\n        pacing: \"Pacing analysis completed\",\n        conflict: \"Conflict development noted\",\n        characterArc: \"Character development observed\",\n        themeDevelopment: \"Themes identified\",\n        recommendations: [\n          {\n            priority: \"medium\",\n            title: \"General Development\",\n            description: \"Continue refining your plot structure\"\n          }\n        ]\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Plot analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Manuscript Manager\n  async analyzeManuscript(chapters) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze this manuscript structure and provide insights:\n    \n    Chapters: ${JSON.stringify(chapters)}\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallProgress\": 65,\n      \"totalWordCount\": 50000,\n      \"averageChapterLength\": 2500,\n      \"paceAnalysis\": \"analysis of pacing across chapters\",\n      \"consistencyIssues\": [\"issue1\", \"issue2\"],\n      \"suggestions\": [\"suggestion1\", \"suggestion2\"],\n      \"readabilityScore\": 85,\n      \"chapterInsights\": [\n        {\n          \"chapterNumber\": 1,\n          \"strengths\": [\"strength1\"],\n          \"improvements\": [\"improvement1\"],\n          \"paceRating\": \"good\"\n        }\n      ]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallProgress: 0,\n        totalWordCount: 0,\n        averageChapterLength: 0,\n        paceAnalysis: \"Analysis in progress\",\n        consistencyIssues: [],\n        suggestions: [\"Continue writing your manuscript\"],\n        readabilityScore: 75,\n        chapterInsights: []\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Manuscript analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Scene Builder\n  async analyzeScene(sceneText, sceneType) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze this scene for conflict, tension, and effectiveness:\n    \n    Scene Type: ${sceneType}\n    Scene Text: \"${sceneText}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"conflictLevel\": 85,\n      \"tensionRating\": 90,\n      \"paceRating\": 75,\n      \"dialogueQuality\": 80,\n      \"characterDevelopment\": 70,\n      \"conflictTypes\": [\"internal\", \"external\"],\n      \"tensionTechniques\": [\"technique1\", \"technique2\"],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"improvements\": [\"improvement1\", \"improvement2\"],\n      \"suggestions\": [\n        {\n          \"type\": \"Conflict\",\n          \"description\": \"suggestion description\",\n          \"example\": \"example implementation\"\n        }\n      ]\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        conflictLevel: 50,\n        tensionRating: 50,\n        paceRating: 50,\n        dialogueQuality: 50,\n        characterDevelopment: 50,\n        conflictTypes: [\"general\"],\n        tensionTechniques: [\"basic tension\"],\n        strengths: [\"Scene analyzed\"],\n        improvements: [\"Continue developing\"],\n        suggestions: [\n          {\n            type: \"General\",\n            description: \"Scene analysis completed\",\n            example: \"Continue refining your scene\"\n          }\n        ]\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Scene analysis failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Readability Optimizer\n  async analyzeReadability(text, targetAudience) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze the readability of this text for target audience: ${targetAudience}\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"readabilityScore\": 85,\n      \"gradeLevel\": \"8th Grade\",\n      \"targetMatch\": true,\n      \"wordComplexity\": \"appropriate\",\n      \"sentenceLength\": \"good\",\n      \"vocabularyLevel\": \"suitable\",\n      \"improvements\": [\n        {\n          \"issue\": \"issue description\",\n          \"suggestion\": \"how to fix\",\n          \"example\": \"example fix\"\n        }\n      ],\n      \"strengths\": [\"strength1\", \"strength2\"],\n      \"optimizedVersion\": \"optimized text version\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        readabilityScore: 75,\n        gradeLevel: \"General Adult\",\n        targetMatch: true,\n        wordComplexity: \"appropriate\",\n        sentenceLength: \"good\",\n        vocabularyLevel: \"suitable\",\n        improvements: [\n          {\n            issue: \"Analysis completed\",\n            suggestion: \"Continue refining text\",\n            example: \"Keep developing your writing\"\n          }\n        ],\n        strengths: [\"Text analyzed successfully\"],\n        optimizedVersion: text\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Readability analysis failed: ${error.message}`);\n    }\n  }\n\n  // Existing methods with improved response handling...\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning. Provide ONLY the rewritten text without explanations: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology. Provide ONLY the rewritten text: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand. Provide ONLY the simplified text: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style. Provide ONLY the creative version: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points. Provide ONLY the shortened text: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail and elaboration. Provide ONLY the expanded text: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}. Provide ONLY the result: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text. Provide ONLY the paraphrased version: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text().trim();\n\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text. Provide ONLY the summary: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details. Provide ONLY the summary: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text. Provide ONLY the summary: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text().trim();\n\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze the tone of the following text.\n    \n    Text: \"${text}\"\n    \n    Respond with ONLY a valid JSON object (no markdown formatting) in this exact format:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive\",\n      \"confidence\": \"high\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      const analysis = this.cleanAndParseResponse(response.text()) || {\n        overallTone: \"Neutral tone detected\",\n        sentiment: \"neutral\",\n        confidence: \"medium\",\n        emotions: [\"general\"],\n        suggestions: \"Tone analysis completed successfully\"\n      };\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in this context: \"${context}\". \n    Return ONLY a JSON array of synonyms: [\"synonym1\", \"synonym2\", \"synonym3\", \"synonym4\", \"synonym5\", \"synonym6\", \"synonym7\", \"synonym8\"]`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      let synonyms = this.cleanAndParseResponse(response.text());\n      if (!Array.isArray(synonyms)) {\n        synonyms = response.text().split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n\n      return { success: true, synonyms };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Make the following AI-generated text sound more natural and human-written. Provide ONLY the humanized version without explanations:\n    \n    Text: \"${text}\"`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return { success: true, result: response.text().trim() };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}