{"ast":null,"code":"import axios from 'axios';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const paraphraseText = async (text, mode, customPrompt = '') => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/paraphrase`, {\n      text,\n      mode,\n      customPrompt\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error paraphrasing text:', error);\n    throw error;\n  }\n};\nexport const summarizeText = async (text, length = 'medium') => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/summarize`, {\n      text,\n      length\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error summarizing text:', error);\n    throw error;\n  }\n};\nexport const analyzeTone = async text => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/analyze-tone`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error analyzing tone:', error);\n    throw error;\n  }\n};\nexport const checkPlagiarism = async text => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/check-plagiarism`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error checking plagiarism:', error);\n    throw error;\n  }\n};\nexport const humanizeText = async text => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/humanize`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error humanizing text:', error);\n    throw error;\n  }\n};\nexport const getSynonyms = async (word, context) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/synonyms`, {\n      word,\n      context\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting synonyms:', error);\n    throw error;\n  }\n};\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh phrasing: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining main points: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text with more detail: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences): \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        summary: response.text(),\n        originalLength: text.length,\n        summaryLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze the tone of this text and provide JSON format response:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\", \n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }\n    \n    Text: \"${text}\"`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      try {\n        const analysis = JSON.parse(response.text());\n        return {\n          success: true,\n          analysis\n        };\n      } catch {\n        return {\n          success: true,\n          analysis: {\n            overallTone: response.text(),\n            sentiment: \"neutral\",\n            confidence: \"medium\",\n            emotions: [],\n            suggestions: \"Analysis completed\"\n          }\n        };\n      }\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Provide 8 synonyms for \"${word}\" in context: \"${context}\". Return as JSON array.`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      try {\n        const synonyms = JSON.parse(response.text());\n        return {\n          success: true,\n          synonyms\n        };\n      } catch {\n        const synonyms = response.text().split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n        return {\n          success: true,\n          synonyms\n        };\n      }\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Make this AI text sound more natural and human-written: \"${text}\"`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text()\n      };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\nexport const geminiService = new GeminiService();","map":{"version":3,"names":["axios","GoogleGenerativeAI","API_BASE_URL","process","env","REACT_APP_API_URL","paraphraseText","text","mode","customPrompt","response","post","data","error","console","summarizeText","length","analyzeTone","checkPlagiarism","humanizeText","getSynonyms","word","context","GeminiService","constructor","genAI","setApiKey","apiKey","Error","prompt","model","getGenerativeModel","result","generateContent","success","originalLength","newLength","message","summary","summaryLength","analysis","JSON","parse","overallTone","sentiment","confidence","emotions","suggestions","synonyms","split","map","s","trim","replace","slice","geminiService"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/services/geminiAPI.js"],"sourcesContent":["import axios from 'axios';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const paraphraseText = async (text, mode, customPrompt = '') => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/paraphrase`, {\n      text,\n      mode,\n      customPrompt\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error paraphrasing text:', error);\n    throw error;\n  }\n};\n\nexport const summarizeText = async (text, length = 'medium') => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/summarize`, {\n      text,\n      length\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error summarizing text:', error);\n    throw error;\n  }\n};\n\nexport const analyzeTone = async (text) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/analyze-tone`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error analyzing tone:', error);\n    throw error;\n  }\n};\n\nexport const checkPlagiarism = async (text) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/check-plagiarism`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error checking plagiarism:', error);\n    throw error;\n  }\n};\n\nexport const humanizeText = async (text) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/humanize`, {\n      text\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error humanizing text:', error);\n    throw error;\n  }\n};\n\nexport const getSynonyms = async (word, context) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/synonyms`, {\n      word,\n      context\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting synonyms:', error);\n    throw error;\n  }\n};\n\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh phrasing: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining main points: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text with more detail: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text(),\n        originalLength: text.length,\n        newLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences): \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        summary: response.text(),\n        originalLength: text.length,\n        summaryLength: response.text().length\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze the tone of this text and provide JSON format response:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\", \n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }\n    \n    Text: \"${text}\"`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      try {\n        const analysis = JSON.parse(response.text());\n        return { success: true, analysis };\n      } catch {\n        return {\n          success: true,\n          analysis: {\n            overallTone: response.text(),\n            sentiment: \"neutral\",\n            confidence: \"medium\",\n            emotions: [],\n            suggestions: \"Analysis completed\"\n          }\n        };\n      }\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Provide 8 synonyms for \"${word}\" in context: \"${context}\". Return as JSON array.`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      \n      try {\n        const synonyms = JSON.parse(response.text());\n        return { success: true, synonyms };\n      } catch {\n        const synonyms = response.text().split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n        return { success: true, synonyms };\n      }\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Make this AI text sound more natural and human-written: \"${text}\"`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return { success: true, result: response.text() };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}