{"ast":null,"code":"var _jsxFileName = \"/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/components/MainEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { geminiService } from '../services/geminiAPI';\nimport ApiKeyModal from './ApiKeyModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainEditor = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [selectedText, setSelectedText] = useState('');\n  const [synonyms, setSynonyms] = useState([]);\n  const [showSynonyms, setShowSynonyms] = useState(false);\n  const [synonymPosition, setSynonymPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [results, setResults] = useState({});\n  const [loading, setLoading] = useState({});\n  const [frozenWords, setFrozenWords] = useState(new Set());\n  const [compareMode, setCompareMode] = useState(false);\n  const [compareResults, setCompareResults] = useState([]);\n  const [showApiModal, setShowApiModal] = useState(false);\n  const [apiKeySet, setApiKeySet] = useState(false);\n  const [error, setError] = useState('');\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    const savedKey = localStorage.getItem('gemini_api_key');\n    if (savedKey) {\n      geminiService.setApiKey(savedKey);\n      setApiKeySet(true);\n    } else {\n      setShowApiModal(true);\n    }\n  }, []);\n  const handleApiKeySet = apiKey => {\n    geminiService.setApiKey(apiKey);\n    setApiKeySet(true);\n    setShowApiModal(false);\n  };\n  const handleTextSelection = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n    if (selectedText && selectedText.length > 0) {\n      setSelectedText(selectedText);\n\n      // Get word synonyms if single word selected\n      if (selectedText.split(' ').length === 1) {\n        try {\n          const response = await geminiService.getSynonyms(selectedText, text);\n          if (response.success) {\n            setSynonyms(response.synonyms);\n\n            // Position synonym popup near selection\n            const range = selection.getRangeAt(0);\n            const rect = range.getBoundingClientRect();\n            setSynonymPosition({\n              x: rect.left,\n              y: rect.bottom + window.scrollY\n            });\n            setShowSynonyms(true);\n          }\n        } catch (error) {\n          setError('Failed to get synonyms: ' + error.message);\n        }\n      }\n    } else {\n      setShowSynonyms(false);\n    }\n  };\n  const replaceSynonym = synonym => {\n    const newText = text.replace(selectedText, synonym);\n    setText(newText);\n    setShowSynonyms(false);\n  };\n  const freezeWord = word => {\n    const newFrozenWords = new Set(frozenWords);\n    if (newFrozenWords.has(word)) {\n      newFrozenWords.delete(word);\n    } else {\n      newFrozenWords.add(word);\n    }\n    setFrozenWords(newFrozenWords);\n  };\n  const handleParaphrase = async (mode, customPrompt = '') => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n    if (!text.trim()) return;\n    setLoading(prev => ({\n      ...prev,\n      [mode]: true\n    }));\n    setError('');\n    try {\n      // Protect frozen words\n      let processedText = text;\n      frozenWords.forEach(word => {\n        processedText = processedText.replace(new RegExp(`\\\\b${word}\\\\b`, 'gi'), `[FROZEN]${word}[/FROZEN]`);\n      });\n      const response = await geminiService.paraphraseText(processedText, mode, customPrompt);\n      if (response.success) {\n        let result = response.result;\n        // Restore frozen words\n        frozenWords.forEach(word => {\n          result = result.replace(new RegExp(`\\\\[FROZEN\\\\]${word}\\\\[/FROZEN\\\\]`, 'gi'), word);\n        });\n        if (compareMode) {\n          setCompareResults(prev => [...prev, {\n            mode,\n            result,\n            original: text\n          }]);\n        } else {\n          setResults(prev => ({\n            ...prev,\n            [mode]: result\n          }));\n        }\n      }\n    } catch (error) {\n      setError('Paraphrasing failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [mode]: false\n      }));\n    }\n  };\n  const handleSummarize = async (length = 'medium') => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n    if (!text.trim()) return;\n    setLoading(prev => ({\n      ...prev,\n      summarize: true\n    }));\n    setError('');\n    try {\n      const response = await geminiService.summarizeText(text, length);\n      if (response.success) {\n        setResults(prev => ({\n          ...prev,\n          summary: response.summary\n        }));\n      }\n    } catch (error) {\n      setError('Summarization failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        summarize: false\n      }));\n    }\n  };\n  const handleToneAnalysis = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n    if (!text.trim()) return;\n    setLoading(prev => ({\n      ...prev,\n      tone: true\n    }));\n    setError('');\n    try {\n      const response = await geminiService.analyzeTone(text);\n      if (response.success) {\n        setResults(prev => ({\n          ...prev,\n          toneAnalysis: response.analysis\n        }));\n      }\n    } catch (error) {\n      setError('Tone analysis failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        tone: false\n      }));\n    }\n  };\n  const handleHumanize = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n    if (!text.trim()) return;\n    setLoading(prev => ({\n      ...prev,\n      humanize: true\n    }));\n    setError('');\n    try {\n      const response = await geminiService.humanizeText(text);\n      if (response.success) {\n        setResults(prev => ({\n          ...prev,\n          humanized: response.result\n        }));\n      }\n    } catch (error) {\n      setError('Humanization failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        humanize: false\n      }));\n    }\n  };\n  const paraphraseModes = ['Formal', 'Academic', 'Simple', 'Creative', 'Shorten', 'Expand'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-editor\",\n    children: [/*#__PURE__*/_jsxDEV(ApiKeyModal, {\n      isOpen: showApiModal,\n      onApiKeySet: handleApiKeySet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"QuillBot Flow - All-in-One Writing Space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `compare-btn ${compareMode ? 'active' : ''}`,\n          onClick: () => setCompareMode(!compareMode),\n          children: \"Compare Modes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"api-key-btn\",\n          onClick: () => setShowApiModal(true),\n          children: \"\\uD83D\\uDD11 API Key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"word-count\",\n          children: [text.split(' ').filter(w => w).length, \" words\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textareaRef,\n          value: text,\n          onChange: e => setText(e.target.value),\n          onMouseUp: handleTextSelection,\n          placeholder: \"Start writing here...\",\n          className: \"main-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), frozenWords.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"frozen-words\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Frozen Words:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), Array.from(frozenWords).map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"frozen-word\",\n            onClick: () => freezeWord(word),\n            children: [word, \" \\xD7\"]\n          }, word, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tools-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Paraphrasing Modes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-buttons\",\n            children: paraphraseModes.map(mode => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleParaphrase(mode),\n              disabled: loading[mode] || !apiKeySet,\n              className: \"mode-btn\",\n              children: loading[mode] ? 'Processing...' : mode\n            }, mode, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Analysis Tools\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleToneAnalysis,\n              disabled: loading.tone || !apiKeySet,\n              children: loading.tone ? 'Analyzing...' : 'Tone Insights'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSummarize,\n              disabled: loading.summarize || !apiKeySet,\n              children: loading.summarize ? 'Summarizing...' : 'Summarize'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleHumanize,\n              disabled: loading.humanize || !apiKeySet,\n              children: loading.humanize ? 'Humanizing...' : 'AI Humanizer'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), showSynonyms && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"synonym-popup\",\n      style: {\n        position: 'absolute',\n        left: synonymPosition.x,\n        top: synonymPosition.y,\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Synonyms for \\\"\", selectedText, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"synonym-list\",\n        children: synonyms.map((synonym, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => replaceSynonym(synonym),\n          className: \"synonym-option\",\n          children: synonym\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => freezeWord(selectedText),\n        className: \"freeze-btn\",\n        children: [frozenWords.has(selectedText) ? 'Unfreeze' : 'Freeze', \" Word\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-section\",\n      children: [compareMode && compareResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mode Comparison\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compare-grid\",\n          children: compareResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"compare-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: result.mode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: result.result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), Object.entries(results).map(([key, value]) => {\n        var _value$emotions;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: key.charAt(0).toUpperCase() + key.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), key === 'toneAnalysis' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tone-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Overall Tone:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 20\n              }, this), \" \", value.overallTone]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Sentiment:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 20\n              }, this), \" \", value.sentiment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Confidence:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 20\n              }, this), \" \", value.confidence]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), ((_value$emotions = value.emotions) === null || _value$emotions === void 0 ? void 0 : _value$emotions.length) > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Emotions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 22\n              }, this), \" \", value.emotions.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Suggestions:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 20\n              }, this), \" \", value.suggestions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(MainEditor, \"QlpaEANYWJyBRzV8gdgZiVgfjyY=\");\n_c = MainEditor;\nexport default MainEditor;\nvar _c;\n$RefreshReg$(_c, \"MainEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","geminiService","ApiKeyModal","jsxDEV","_jsxDEV","MainEditor","_s","text","setText","selectedText","setSelectedText","synonyms","setSynonyms","showSynonyms","setShowSynonyms","synonymPosition","setSynonymPosition","x","y","results","setResults","loading","setLoading","frozenWords","setFrozenWords","Set","compareMode","setCompareMode","compareResults","setCompareResults","showApiModal","setShowApiModal","apiKeySet","setApiKeySet","error","setError","textareaRef","savedKey","localStorage","getItem","setApiKey","handleApiKeySet","apiKey","handleTextSelection","selection","window","getSelection","toString","trim","length","split","response","getSynonyms","success","range","getRangeAt","rect","getBoundingClientRect","left","bottom","scrollY","message","replaceSynonym","synonym","newText","replace","freezeWord","word","newFrozenWords","has","delete","add","handleParaphrase","mode","customPrompt","prev","processedText","forEach","RegExp","paraphraseText","result","original","handleSummarize","summarize","summarizeText","summary","handleToneAnalysis","tone","analyzeTone","toneAnalysis","analysis","handleHumanize","humanize","humanizeText","humanized","paraphraseModes","className","children","isOpen","onApiKeySet","fileName","_jsxFileName","lineNumber","columnNumber","onClick","filter","w","ref","value","onChange","e","target","onMouseUp","placeholder","size","Array","from","map","disabled","style","position","top","zIndex","index","Object","entries","key","_value$emotions","charAt","toUpperCase","slice","overallTone","sentiment","confidence","emotions","join","suggestions","_c","$RefreshReg$"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/components/MainEditor.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { geminiService } from '../services/geminiAPI';\nimport ApiKeyModal from './ApiKeyModal';\n\nconst MainEditor = () => {\n  const [text, setText] = useState('');\n  const [selectedText, setSelectedText] = useState('');\n  const [synonyms, setSynonyms] = useState([]);\n  const [showSynonyms, setShowSynonyms] = useState(false);\n  const [synonymPosition, setSynonymPosition] = useState({ x: 0, y: 0 });\n  const [results, setResults] = useState({});\n  const [loading, setLoading] = useState({});\n  const [frozenWords, setFrozenWords] = useState(new Set());\n  const [compareMode, setCompareMode] = useState(false);\n  const [compareResults, setCompareResults] = useState([]);\n  const [showApiModal, setShowApiModal] = useState(false);\n  const [apiKeySet, setApiKeySet] = useState(false);\n  const [error, setError] = useState('');\n  \n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    const savedKey = localStorage.getItem('gemini_api_key');\n    if (savedKey) {\n      geminiService.setApiKey(savedKey);\n      setApiKeySet(true);\n    } else {\n      setShowApiModal(true);\n    }\n  }, []);\n\n  const handleApiKeySet = (apiKey) => {\n    geminiService.setApiKey(apiKey);\n    setApiKeySet(true);\n    setShowApiModal(false);\n  };\n\n  const handleTextSelection = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n    \n    if (selectedText && selectedText.length > 0) {\n      setSelectedText(selectedText);\n      \n      // Get word synonyms if single word selected\n      if (selectedText.split(' ').length === 1) {\n        try {\n          const response = await geminiService.getSynonyms(selectedText, text);\n          if (response.success) {\n            setSynonyms(response.synonyms);\n            \n            // Position synonym popup near selection\n            const range = selection.getRangeAt(0);\n            const rect = range.getBoundingClientRect();\n            setSynonymPosition({\n              x: rect.left,\n              y: rect.bottom + window.scrollY\n            });\n            setShowSynonyms(true);\n          }\n        } catch (error) {\n          setError('Failed to get synonyms: ' + error.message);\n        }\n      }\n    } else {\n      setShowSynonyms(false);\n    }\n  };\n\n  const replaceSynonym = (synonym) => {\n    const newText = text.replace(selectedText, synonym);\n    setText(newText);\n    setShowSynonyms(false);\n  };\n\n  const freezeWord = (word) => {\n    const newFrozenWords = new Set(frozenWords);\n    if (newFrozenWords.has(word)) {\n      newFrozenWords.delete(word);\n    } else {\n      newFrozenWords.add(word);\n    }\n    setFrozenWords(newFrozenWords);\n  };\n\n  const handleParaphrase = async (mode, customPrompt = '') => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n\n    if (!text.trim()) return;\n    \n    setLoading(prev => ({ ...prev, [mode]: true }));\n    setError('');\n    \n    try {\n      // Protect frozen words\n      let processedText = text;\n      frozenWords.forEach(word => {\n        processedText = processedText.replace(new RegExp(`\\\\b${word}\\\\b`, 'gi'), `[FROZEN]${word}[/FROZEN]`);\n      });\n\n      const response = await geminiService.paraphraseText(processedText, mode, customPrompt);\n      if (response.success) {\n        let result = response.result;\n        // Restore frozen words\n        frozenWords.forEach(word => {\n          result = result.replace(new RegExp(`\\\\[FROZEN\\\\]${word}\\\\[/FROZEN\\\\]`, 'gi'), word);\n        });\n\n        if (compareMode) {\n          setCompareResults(prev => [...prev, { mode, result, original: text }]);\n        } else {\n          setResults(prev => ({ ...prev, [mode]: result }));\n        }\n      }\n    } catch (error) {\n      setError('Paraphrasing failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({ ...prev, [mode]: false }));\n    }\n  };\n\n  const handleSummarize = async (length = 'medium') => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n\n    if (!text.trim()) return;\n    \n    setLoading(prev => ({ ...prev, summarize: true }));\n    setError('');\n    \n    try {\n      const response = await geminiService.summarizeText(text, length);\n      if (response.success) {\n        setResults(prev => ({ ...prev, summary: response.summary }));\n      }\n    } catch (error) {\n      setError('Summarization failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({ ...prev, summarize: false }));\n    }\n  };\n\n  const handleToneAnalysis = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n\n    if (!text.trim()) return;\n    \n    setLoading(prev => ({ ...prev, tone: true }));\n    setError('');\n    \n    try {\n      const response = await geminiService.analyzeTone(text);\n      if (response.success) {\n        setResults(prev => ({ ...prev, toneAnalysis: response.analysis }));\n      }\n    } catch (error) {\n      setError('Tone analysis failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({ ...prev, tone: false }));\n    }\n  };\n\n  const handleHumanize = async () => {\n    if (!apiKeySet) {\n      setShowApiModal(true);\n      return;\n    }\n\n    if (!text.trim()) return;\n    \n    setLoading(prev => ({ ...prev, humanize: true }));\n    setError('');\n    \n    try {\n      const response = await geminiService.humanizeText(text);\n      if (response.success) {\n        setResults(prev => ({ ...prev, humanized: response.result }));\n      }\n    } catch (error) {\n      setError('Humanization failed: ' + error.message);\n    } finally {\n      setLoading(prev => ({ ...prev, humanize: false }));\n    }\n  };\n\n  const paraphraseModes = ['Formal', 'Academic', 'Simple', 'Creative', 'Shorten', 'Expand'];\n\n  return (\n    <div className=\"main-editor\">\n      <ApiKeyModal isOpen={showApiModal} onApiKeySet={handleApiKeySet} />\n      \n      <div className=\"editor-header\">\n        <h1>QuillBot Flow - All-in-One Writing Space</h1>\n        <div className=\"editor-controls\">\n          <button \n            className={`compare-btn ${compareMode ? 'active' : ''}`}\n            onClick={() => setCompareMode(!compareMode)}\n          >\n            Compare Modes\n          </button>\n          <button \n            className=\"api-key-btn\"\n            onClick={() => setShowApiModal(true)}\n          >\n            🔑 API Key\n          </button>\n          <span className=\"word-count\">{text.split(' ').filter(w => w).length} words</span>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"editor-container\">\n        <div className=\"input-section\">\n          <textarea\n            ref={textareaRef}\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            onMouseUp={handleTextSelection}\n            placeholder=\"Start writing here...\"\n            className=\"main-textarea\"\n          />\n          \n          {frozenWords.size > 0 && (\n            <div className=\"frozen-words\">\n              <h4>Frozen Words:</h4>\n              {Array.from(frozenWords).map(word => (\n                <span key={word} className=\"frozen-word\" onClick={() => freezeWord(word)}>\n                  {word} ×\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"tools-section\">\n          <div className=\"tool-group\">\n            <h3>Paraphrasing Modes</h3>\n            <div className=\"mode-buttons\">\n              {paraphraseModes.map(mode => (\n                <button\n                  key={mode}\n                  onClick={() => handleParaphrase(mode)}\n                  disabled={loading[mode] || !apiKeySet}\n                  className=\"mode-btn\"\n                >\n                  {loading[mode] ? 'Processing...' : mode}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"tool-group\">\n            <h3>Analysis Tools</h3>\n            <div className=\"analysis-buttons\">\n              <button onClick={handleToneAnalysis} disabled={loading.tone || !apiKeySet}>\n                {loading.tone ? 'Analyzing...' : 'Tone Insights'}\n              </button>\n              <button onClick={handleSummarize} disabled={loading.summarize || !apiKeySet}>\n                {loading.summarize ? 'Summarizing...' : 'Summarize'}\n              </button>\n              <button onClick={handleHumanize} disabled={loading.humanize || !apiKeySet}>\n                {loading.humanize ? 'Humanizing...' : 'AI Humanizer'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showSynonyms && (\n        <div \n          className=\"synonym-popup\"\n          style={{\n            position: 'absolute',\n            left: synonymPosition.x,\n            top: synonymPosition.y,\n            zIndex: 1000\n          }}\n        >\n          <h4>Synonyms for \"{selectedText}\"</h4>\n          <div className=\"synonym-list\">\n            {synonyms.map((synonym, index) => (\n              <button\n                key={index}\n                onClick={() => replaceSynonym(synonym)}\n                className=\"synonym-option\"\n              >\n                {synonym}\n              </button>\n            ))}\n          </div>\n          <button onClick={() => freezeWord(selectedText)} className=\"freeze-btn\">\n            {frozenWords.has(selectedText) ? 'Unfreeze' : 'Freeze'} Word\n          </button>\n        </div>\n      )}\n\n      <div className=\"results-section\">\n        {compareMode && compareResults.length > 0 && (\n          <div className=\"compare-results\">\n            <h3>Mode Comparison</h3>\n            <div className=\"compare-grid\">\n              {compareResults.map((result, index) => (\n                <div key={index} className=\"compare-item\">\n                  <h4>{result.mode}</h4>\n                  <p>{result.result}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {Object.entries(results).map(([key, value]) => (\n          <div key={key} className=\"result-item\">\n            <h3>{key.charAt(0).toUpperCase() + key.slice(1)}</h3>\n            {key === 'toneAnalysis' ? (\n              <div className=\"tone-results\">\n                <p><strong>Overall Tone:</strong> {value.overallTone}</p>\n                <p><strong>Sentiment:</strong> {value.sentiment}</p>\n                <p><strong>Confidence:</strong> {value.confidence}</p>\n                {value.emotions?.length > 0 && (\n                  <p><strong>Emotions:</strong> {value.emotions.join(', ')}</p>\n                )}\n                <p><strong>Suggestions:</strong> {value.suggestions}</p>\n              </div>\n            ) : (\n              <p>{value}</p>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MainEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}