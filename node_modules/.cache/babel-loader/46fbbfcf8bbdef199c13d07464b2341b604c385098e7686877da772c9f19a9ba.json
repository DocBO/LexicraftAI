{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { geminiService } from '../services/geminiAPI';\n\n// const ManuscriptManager = () => {\n//   const [chapters, setChapters] = useState([]);\n//   const [currentChapter, setCurrentChapter] = useState({ title: '', content: '', wordCount: 0 });\n//   const [analysis, setAnalysis] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [editingChapter, setEditingChapter] = useState(null);\n\n//   useEffect(() => {\n//     const savedChapters = localStorage.getItem('manuscript_chapters');\n//     if (savedChapters) {\n//       setChapters(JSON.parse(savedChapters));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem('manuscript_chapters', JSON.stringify(chapters));\n//   }, [chapters]);\n\n//   const addChapter = () => {\n//     if (!currentChapter.title.trim() || !currentChapter.content.trim()) return;\n\n//     const newChapter = {\n//       id: Date.now(),\n//       title: currentChapter.title,\n//       content: currentChapter.content,\n//       wordCount: currentChapter.content.split(' ').filter(w => w).length,\n//       createdAt: new Date().toLocaleDateString(),\n//       status: 'draft'\n//     };\n\n//     setChapters(prev => [...prev, newChapter]);\n//     setCurrentChapter({ title: '', content: '', wordCount: 0 });\n//   };\n\n//   const updateChapter = (id, updatedChapter) => {\n//     setChapters(prev => prev.map(chapter => \n//       chapter.id === id \n//         ? { ...chapter, ...updatedChapter, wordCount: updatedChapter.content.split(' ').filter(w => w).length }\n//         : chapter\n//     ));\n//     setEditingChapter(null);\n//   };\n\n//   const deleteChapter = (id) => {\n//     setChapters(prev => prev.filter(chapter => chapter.id !== id));\n//   };\n\n//   const analyzeManuscript = async () => {\n//     if (chapters.length === 0) return;\n\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const chapterData = chapters.map(ch => ({\n//         title: ch.title,\n//         wordCount: ch.wordCount,\n//         content: ch.content.substring(0, 500) // First 500 chars for analysis\n//       }));\n\n//       const response = await geminiService.analyzeManuscript(chapterData);\n//       if (response.success) {\n//         setAnalysis(response.analysis);\n//       }\n//     } catch (error) {\n//       setError('Failed to analyze manuscript: ' + error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleContentChange = (content) => {\n//     setCurrentChapter(prev => ({\n//       ...prev,\n//       content,\n//       wordCount: content.split(' ').filter(w => w).length\n//     }));\n//   };\n\n//   const totalWordCount = chapters.reduce((total, chapter) => total + chapter.wordCount, 0);\n//   const averageChapterLength = chapters.length > 0 ? Math.round(totalWordCount / chapters.length) : 0;\n\n//   return (\n//     <div className=\"component manuscript-manager\">\n//       <h2>ðŸ“– Manuscript Manager</h2>\n\n//       <div className=\"manuscript-stats\">\n//         <div className=\"stat-card\">\n//           <h3>{chapters.length}</h3>\n//           <p>Chapters</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{totalWordCount.toLocaleString()}</h3>\n//           <p>Total Words</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{averageChapterLength}</h3>\n//           <p>Avg. Chapter Length</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{Math.round(totalWordCount / 250)}</h3>\n//           <p>Estimated Pages</p>\n//         </div>\n//       </div>\n\n//       <div className=\"chapter-input-section\">\n//         <h3>Add New Chapter</h3>\n//         <input\n//           type=\"text\"\n//           value={currentChapter.title}\n//           onChange={(e) => setCurrentChapter(prev => ({ ...prev, title: e.target.value }))}\n//           placeholder=\"Chapter title...\"\n//           className=\"chapter-title-input\"\n//         />\n\n//         <textarea\n//           value={currentChapter.content}\n//           onChange={(e) => handleContentChange(e.target.value)}\n//           placeholder=\"Write your chapter content here...\"\n//           className=\"chapter-content-input\"\n//           style={{ height: '300px' }}\n//         />\n\n//         <div className=\"chapter-input-footer\">\n//           <span className=\"word-count\">{currentChapter.wordCount} words</span>\n//           <button \n//             onClick={addChapter}\n//             disabled={!currentChapter.title.trim() || !currentChapter.content.trim()}\n//             className=\"button\"\n//           >\n//             Add Chapter\n//           </button>\n//         </div>\n//       </div>\n\n//       <div className=\"chapters-list\">\n//         <div className=\"chapters-header\">\n//           <h3>Chapters ({chapters.length})</h3>\n//           <button \n//             onClick={analyzeManuscript}\n//             disabled={loading || chapters.length === 0}\n//             className=\"button secondary\"\n//           >\n//             {loading ? 'Analyzing...' : 'Analyze Manuscript'}\n//           </button>\n//         </div>\n\n//         {chapters.map((chapter, index) => (\n//           <div key={chapter.id} className=\"chapter-item\">\n//             {editingChapter === chapter.id ? (\n//               <ChapterEditor \n//                 chapter={chapter}\n//                 onSave={(updated) => updateChapter(chapter.id, updated)}\n//                 onCancel={() => setEditingChapter(null)}\n//               />\n//             ) : (\n//               <ChapterDisplay\n//                 chapter={chapter}\n//                 index={index}\n//                 onEdit={() => setEditingChapter(chapter.id)}\n//                 onDelete={() => deleteChapter(chapter.id)}\n//               />\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {error && <div className=\"error-message\">{error}</div>}\n\n//       {analysis && (\n//         <div className=\"manuscript-analysis\">\n//           <h3>Manuscript Analysis</h3>\n\n//           <div className=\"analysis-overview\">\n//             <div className=\"progress-circle\">\n//               <span className=\"progress-number\">{analysis.overallProgress}%</span>\n//               <span className=\"progress-label\">Overall Progress</span>\n//             </div>\n\n//             <div className=\"readability-score\">\n//               <span className=\"score-number\">{analysis.readabilityScore}</span>\n//               <span className=\"score-label\">Readability Score</span>\n//             </div>\n//           </div>\n\n//           <div className=\"analysis-details\">\n//             <div className=\"analysis-section\">\n//               <h4>Pacing Analysis</h4>\n//               <p>{analysis.paceAnalysis}</p>\n//             </div>\n\n//             {analysis.consistencyIssues.length > 0 && (\n//               <div className=\"analysis-section\">\n//                 <h4>Consistency Issues</h4>\n//                 <ul>\n//                   {analysis.consistencyIssues.map((issue, index) => (\n//                     <li key={index} className=\"issue-item\">{issue}</li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n\n//             <div className=\"analysis-section\">\n//               <h4>Suggestions</h4>\n//               <ul>\n//                 {analysis.suggestions.map((suggestion, index) => (\n//                   <li key={index} className=\"suggestion-item\">{suggestion}</li>\n//                 ))}\n//               </ul>\n//             </div>\n\n//             {analysis.chapterInsights.length > 0 && (\n//               <div className=\"chapter-insights\">\n//                 <h4>Chapter Insights</h4>\n//                 {analysis.chapterInsights.map((insight, index) => (\n//                   <div key={index} className=\"insight-card\">\n//                     <h5>Chapter {insight.chapterNumber}</h5>\n//                     <div className=\"insight-details\">\n//                       <div className=\"strengths\">\n//                         <strong>Strengths:</strong>\n//                         <ul>\n//                           {insight.strengths.map((strength, idx) => (\n//                             <li key={idx}>{strength}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                       <div className=\"improvements\">\n//                         <strong>Improvements:</strong>\n//                         <ul>\n//                           {insight.improvements.map((improvement, idx) => (\n//                             <li key={idx}>{improvement}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                       <div className=\"pace-rating\">\n//                         <strong>Pace:</strong> {insight.paceRating}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const ChapterDisplay = ({ chapter, index, onEdit, onDelete }) => (\n//   <div className=\"chapter-display\">\n//     <div className=\"chapter-header\">\n//       <h4>Chapter {index + 1}: {chapter.title}</h4>\n//       <div className=\"chapter-actions\">\n//         <button onClick={onEdit} className=\"edit-btn\">Edit</button>\n//         <button onClick={onDelete} className=\"delete-btn\">Delete</button>\n//       </div>\n//     </div>\n\n//     <div className=\"chapter-meta\">\n//       <span className=\"word-count\">{chapter.wordCount} words</span>\n//       <span className=\"created-date\">{chapter.createdAt}</span>\n//       <span className={`status ${chapter.status}`}>{chapter.status}</span>\n//     </div>\n\n//     <div className=\"chapter-preview\">\n//       {chapter.content.substring(0, 200)}...\n//     </div>\n//   </div>\n// );\n\n// const ChapterEditor = ({ chapter, onSave, onCancel }) => {\n//   const [title, setTitle] = useState(chapter.title);\n//   const [content, setContent] = useState(chapter.content);\n//   const [status, setStatus] = useState(chapter.status);\n\n//   const handleSave = () => {\n//     onSave({ title, content, status });\n//   };\n\n//   return (\n//     <div className=\"chapter-editor\">\n//       <input\n//         type=\"text\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         className=\"chapter-title-input\"\n//       />\n\n//       <select \n//         value={status} \n//         onChange={(e) => setStatus(e.target.value)}\n//         className=\"status-select\"\n//       >\n//         <option value=\"draft\">Draft</option>\n//         <option value=\"review\">In Review</option>\n//         <option value=\"final\">Final</option>\n//       </select>\n\n//       <textarea\n//         value={content}\n//         onChange={(e) => setContent(e.target.value)}\n//         className=\"chapter-content-input\"\n//         style={{ height: '200px' }}\n//       />\n\n//       <div className=\"editor-actions\">\n//         <button onClick={handleSave} className=\"button\">Save</button>\n//         <button onClick={onCancel} className=\"button secondary\">Cancel</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManuscriptManager;","map":{"version":3,"names":[],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/components/ManuscriptManager.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { geminiService } from '../services/geminiAPI';\n\n// const ManuscriptManager = () => {\n//   const [chapters, setChapters] = useState([]);\n//   const [currentChapter, setCurrentChapter] = useState({ title: '', content: '', wordCount: 0 });\n//   const [analysis, setAnalysis] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [editingChapter, setEditingChapter] = useState(null);\n\n//   useEffect(() => {\n//     const savedChapters = localStorage.getItem('manuscript_chapters');\n//     if (savedChapters) {\n//       setChapters(JSON.parse(savedChapters));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem('manuscript_chapters', JSON.stringify(chapters));\n//   }, [chapters]);\n\n//   const addChapter = () => {\n//     if (!currentChapter.title.trim() || !currentChapter.content.trim()) return;\n\n//     const newChapter = {\n//       id: Date.now(),\n//       title: currentChapter.title,\n//       content: currentChapter.content,\n//       wordCount: currentChapter.content.split(' ').filter(w => w).length,\n//       createdAt: new Date().toLocaleDateString(),\n//       status: 'draft'\n//     };\n\n//     setChapters(prev => [...prev, newChapter]);\n//     setCurrentChapter({ title: '', content: '', wordCount: 0 });\n//   };\n\n//   const updateChapter = (id, updatedChapter) => {\n//     setChapters(prev => prev.map(chapter => \n//       chapter.id === id \n//         ? { ...chapter, ...updatedChapter, wordCount: updatedChapter.content.split(' ').filter(w => w).length }\n//         : chapter\n//     ));\n//     setEditingChapter(null);\n//   };\n\n//   const deleteChapter = (id) => {\n//     setChapters(prev => prev.filter(chapter => chapter.id !== id));\n//   };\n\n//   const analyzeManuscript = async () => {\n//     if (chapters.length === 0) return;\n\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const chapterData = chapters.map(ch => ({\n//         title: ch.title,\n//         wordCount: ch.wordCount,\n//         content: ch.content.substring(0, 500) // First 500 chars for analysis\n//       }));\n\n//       const response = await geminiService.analyzeManuscript(chapterData);\n//       if (response.success) {\n//         setAnalysis(response.analysis);\n//       }\n//     } catch (error) {\n//       setError('Failed to analyze manuscript: ' + error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleContentChange = (content) => {\n//     setCurrentChapter(prev => ({\n//       ...prev,\n//       content,\n//       wordCount: content.split(' ').filter(w => w).length\n//     }));\n//   };\n\n//   const totalWordCount = chapters.reduce((total, chapter) => total + chapter.wordCount, 0);\n//   const averageChapterLength = chapters.length > 0 ? Math.round(totalWordCount / chapters.length) : 0;\n\n//   return (\n//     <div className=\"component manuscript-manager\">\n//       <h2>ðŸ“– Manuscript Manager</h2>\n      \n//       <div className=\"manuscript-stats\">\n//         <div className=\"stat-card\">\n//           <h3>{chapters.length}</h3>\n//           <p>Chapters</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{totalWordCount.toLocaleString()}</h3>\n//           <p>Total Words</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{averageChapterLength}</h3>\n//           <p>Avg. Chapter Length</p>\n//         </div>\n//         <div className=\"stat-card\">\n//           <h3>{Math.round(totalWordCount / 250)}</h3>\n//           <p>Estimated Pages</p>\n//         </div>\n//       </div>\n\n//       <div className=\"chapter-input-section\">\n//         <h3>Add New Chapter</h3>\n//         <input\n//           type=\"text\"\n//           value={currentChapter.title}\n//           onChange={(e) => setCurrentChapter(prev => ({ ...prev, title: e.target.value }))}\n//           placeholder=\"Chapter title...\"\n//           className=\"chapter-title-input\"\n//         />\n        \n//         <textarea\n//           value={currentChapter.content}\n//           onChange={(e) => handleContentChange(e.target.value)}\n//           placeholder=\"Write your chapter content here...\"\n//           className=\"chapter-content-input\"\n//           style={{ height: '300px' }}\n//         />\n        \n//         <div className=\"chapter-input-footer\">\n//           <span className=\"word-count\">{currentChapter.wordCount} words</span>\n//           <button \n//             onClick={addChapter}\n//             disabled={!currentChapter.title.trim() || !currentChapter.content.trim()}\n//             className=\"button\"\n//           >\n//             Add Chapter\n//           </button>\n//         </div>\n//       </div>\n\n//       <div className=\"chapters-list\">\n//         <div className=\"chapters-header\">\n//           <h3>Chapters ({chapters.length})</h3>\n//           <button \n//             onClick={analyzeManuscript}\n//             disabled={loading || chapters.length === 0}\n//             className=\"button secondary\"\n//           >\n//             {loading ? 'Analyzing...' : 'Analyze Manuscript'}\n//           </button>\n//         </div>\n\n//         {chapters.map((chapter, index) => (\n//           <div key={chapter.id} className=\"chapter-item\">\n//             {editingChapter === chapter.id ? (\n//               <ChapterEditor \n//                 chapter={chapter}\n//                 onSave={(updated) => updateChapter(chapter.id, updated)}\n//                 onCancel={() => setEditingChapter(null)}\n//               />\n//             ) : (\n//               <ChapterDisplay\n//                 chapter={chapter}\n//                 index={index}\n//                 onEdit={() => setEditingChapter(chapter.id)}\n//                 onDelete={() => deleteChapter(chapter.id)}\n//               />\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {error && <div className=\"error-message\">{error}</div>}\n\n//       {analysis && (\n//         <div className=\"manuscript-analysis\">\n//           <h3>Manuscript Analysis</h3>\n          \n//           <div className=\"analysis-overview\">\n//             <div className=\"progress-circle\">\n//               <span className=\"progress-number\">{analysis.overallProgress}%</span>\n//               <span className=\"progress-label\">Overall Progress</span>\n//             </div>\n            \n//             <div className=\"readability-score\">\n//               <span className=\"score-number\">{analysis.readabilityScore}</span>\n//               <span className=\"score-label\">Readability Score</span>\n//             </div>\n//           </div>\n\n//           <div className=\"analysis-details\">\n//             <div className=\"analysis-section\">\n//               <h4>Pacing Analysis</h4>\n//               <p>{analysis.paceAnalysis}</p>\n//             </div>\n\n//             {analysis.consistencyIssues.length > 0 && (\n//               <div className=\"analysis-section\">\n//                 <h4>Consistency Issues</h4>\n//                 <ul>\n//                   {analysis.consistencyIssues.map((issue, index) => (\n//                     <li key={index} className=\"issue-item\">{issue}</li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n\n//             <div className=\"analysis-section\">\n//               <h4>Suggestions</h4>\n//               <ul>\n//                 {analysis.suggestions.map((suggestion, index) => (\n//                   <li key={index} className=\"suggestion-item\">{suggestion}</li>\n//                 ))}\n//               </ul>\n//             </div>\n\n//             {analysis.chapterInsights.length > 0 && (\n//               <div className=\"chapter-insights\">\n//                 <h4>Chapter Insights</h4>\n//                 {analysis.chapterInsights.map((insight, index) => (\n//                   <div key={index} className=\"insight-card\">\n//                     <h5>Chapter {insight.chapterNumber}</h5>\n//                     <div className=\"insight-details\">\n//                       <div className=\"strengths\">\n//                         <strong>Strengths:</strong>\n//                         <ul>\n//                           {insight.strengths.map((strength, idx) => (\n//                             <li key={idx}>{strength}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                       <div className=\"improvements\">\n//                         <strong>Improvements:</strong>\n//                         <ul>\n//                           {insight.improvements.map((improvement, idx) => (\n//                             <li key={idx}>{improvement}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                       <div className=\"pace-rating\">\n//                         <strong>Pace:</strong> {insight.paceRating}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const ChapterDisplay = ({ chapter, index, onEdit, onDelete }) => (\n//   <div className=\"chapter-display\">\n//     <div className=\"chapter-header\">\n//       <h4>Chapter {index + 1}: {chapter.title}</h4>\n//       <div className=\"chapter-actions\">\n//         <button onClick={onEdit} className=\"edit-btn\">Edit</button>\n//         <button onClick={onDelete} className=\"delete-btn\">Delete</button>\n//       </div>\n//     </div>\n    \n//     <div className=\"chapter-meta\">\n//       <span className=\"word-count\">{chapter.wordCount} words</span>\n//       <span className=\"created-date\">{chapter.createdAt}</span>\n//       <span className={`status ${chapter.status}`}>{chapter.status}</span>\n//     </div>\n    \n//     <div className=\"chapter-preview\">\n//       {chapter.content.substring(0, 200)}...\n//     </div>\n//   </div>\n// );\n\n// const ChapterEditor = ({ chapter, onSave, onCancel }) => {\n//   const [title, setTitle] = useState(chapter.title);\n//   const [content, setContent] = useState(chapter.content);\n//   const [status, setStatus] = useState(chapter.status);\n\n//   const handleSave = () => {\n//     onSave({ title, content, status });\n//   };\n\n//   return (\n//     <div className=\"chapter-editor\">\n//       <input\n//         type=\"text\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         className=\"chapter-title-input\"\n//       />\n      \n//       <select \n//         value={status} \n//         onChange={(e) => setStatus(e.target.value)}\n//         className=\"status-select\"\n//       >\n//         <option value=\"draft\">Draft</option>\n//         <option value=\"review\">In Review</option>\n//         <option value=\"final\">Final</option>\n//       </select>\n      \n//       <textarea\n//         value={content}\n//         onChange={(e) => setContent(e.target.value)}\n//         className=\"chapter-content-input\"\n//         style={{ height: '200px' }}\n//       />\n      \n//       <div className=\"editor-actions\">\n//         <button onClick={handleSave} className=\"button\">Save</button>\n//         <button onClick={onCancel} className=\"button secondary\">Cancel</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManuscriptManager;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}