{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points and important information: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail, description, and elaboration: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text();\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details of the following text: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text: \"${text}\"`;\n    }\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Analyze the tone of the following text and provide insights about:\n    1. Overall tone (formal, casual, optimistic, pessimistic, etc.)\n    2. Emotional sentiment (positive, negative, neutral)\n    3. Confidence level (high, medium, low)\n    4. Suggestions for improvement if needed\n    \n    Text: \"${text}\"\n    \n    Please format your response as JSON with the following structure:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\",\n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysisText = response.text();\n\n      // Try to parse JSON, fallback to text if parsing fails\n      let analysis;\n      try {\n        analysis = JSON.parse(analysisText);\n      } catch {\n        analysis = {\n          overallTone: analysisText,\n          sentiment: \"neutral\",\n          confidence: \"medium\",\n          emotions: [],\n          suggestions: \"Analysis completed\"\n        };\n      }\n      return {\n        success: true,\n        analysis\n      };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in the context: \"${context}\". \n    Return only a JSON array of synonyms, ordered by relevance.`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const synonymsText = response.text();\n      let synonyms;\n      try {\n        synonyms = JSON.parse(synonymsText);\n      } catch {\n        synonyms = synonymsText.split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n      return {\n        success: true,\n        synonyms\n      };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n    const prompt = `Make the following AI-generated text sound more natural and human-written by:\n    1. Adding natural flow and rhythm\n    2. Including subtle imperfections that humans naturally have\n    3. Making it more conversational and relatable\n    4. Removing overly formal or robotic language\n    \n    Text: \"${text}\"`;\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return {\n        success: true,\n        result: response.text()\n      };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\nexport const geminiService = new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","genAI","setApiKey","apiKey","paraphraseText","text","mode","customPrompt","Error","prompt","model","getGenerativeModel","result","generateContent","response","paraphrasedText","success","originalLength","length","newLength","error","message","summarizeText","summary","summaryLength","compressionRatio","toFixed","analyzeTone","analysisText","analysis","JSON","parse","overallTone","sentiment","confidence","emotions","suggestions","getSynonyms","word","context","synonymsText","synonyms","split","map","s","trim","replace","slice","humanizeText","geminiService"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/services/geminiAPI.js"],"sourcesContent":["\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nclass GeminiService {\n  constructor() {\n    this.genAI = null;\n  }\n\n  setApiKey(apiKey) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async paraphraseText(text, mode, customPrompt = '') {\n    if (!this.genAI) {\n      throw new Error('API key not set. Please configure your Gemini API key.');\n    }\n\n    let prompt;\n    switch (mode) {\n      case 'Formal':\n        prompt = `Rewrite the following text in a formal, professional tone while maintaining the original meaning: \"${text}\"`;\n        break;\n      case 'Academic':\n        prompt = `Rewrite the following text in an academic, scholarly style with appropriate terminology: \"${text}\"`;\n        break;\n      case 'Simple':\n        prompt = `Simplify the following text to make it easier to read and understand: \"${text}\"`;\n        break;\n      case 'Creative':\n        prompt = `Creatively rewrite the following text with fresh, original phrasing and style: \"${text}\"`;\n        break;\n      case 'Shorten':\n        prompt = `Condense the following text while retaining all main points and important information: \"${text}\"`;\n        break;\n      case 'Expand':\n        prompt = `Expand the following text by adding more detail, description, and elaboration: \"${text}\"`;\n        break;\n      case 'Custom':\n        prompt = `${customPrompt}: \"${text}\"`;\n        break;\n      default:\n        prompt = `Paraphrase the following text: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const paraphrasedText = response.text();\n\n      return {\n        success: true,\n        result: paraphrasedText,\n        originalLength: text.length,\n        newLength: paraphrasedText.length\n      };\n    } catch (error) {\n      throw new Error(`Paraphrasing failed: ${error.message}`);\n    }\n  }\n\n  async summarizeText(text, length = 'medium') {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    let prompt;\n    switch (length) {\n      case 'short':\n        prompt = `Provide a brief summary (2-3 sentences) of the following text: \"${text}\"`;\n        break;\n      case 'long':\n        prompt = `Provide a detailed summary with key points and supporting details of the following text: \"${text}\"`;\n        break;\n      default:\n        prompt = `Provide a concise summary of the following text: \"${text}\"`;\n    }\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n\n      return {\n        success: true,\n        summary,\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: ((text.length - summary.length) / text.length * 100).toFixed(1)\n      };\n    } catch (error) {\n      throw new Error(`Summarization failed: ${error.message}`);\n    }\n  }\n\n  async analyzeTone(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Analyze the tone of the following text and provide insights about:\n    1. Overall tone (formal, casual, optimistic, pessimistic, etc.)\n    2. Emotional sentiment (positive, negative, neutral)\n    3. Confidence level (high, medium, low)\n    4. Suggestions for improvement if needed\n    \n    Text: \"${text}\"\n    \n    Please format your response as JSON with the following structure:\n    {\n      \"overallTone\": \"description\",\n      \"sentiment\": \"positive/negative/neutral\",\n      \"confidence\": \"high/medium/low\",\n      \"emotions\": [\"emotion1\", \"emotion2\"],\n      \"suggestions\": \"improvement suggestions\"\n    }`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysisText = response.text();\n      \n      // Try to parse JSON, fallback to text if parsing fails\n      let analysis;\n      try {\n        analysis = JSON.parse(analysisText);\n      } catch {\n        analysis = {\n          overallTone: analysisText,\n          sentiment: \"neutral\",\n          confidence: \"medium\",\n          emotions: [],\n          suggestions: \"Analysis completed\"\n        };\n      }\n\n      return { success: true, analysis };\n    } catch (error) {\n      throw new Error(`Tone analysis failed: ${error.message}`);\n    }\n  }\n\n  async getSynonyms(word, context) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Provide 8 synonyms for the word \"${word}\" in the context: \"${context}\". \n    Return only a JSON array of synonyms, ordered by relevance.`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const synonymsText = response.text();\n      \n      let synonyms;\n      try {\n        synonyms = JSON.parse(synonymsText);\n      } catch {\n        synonyms = synonymsText.split(',').map(s => s.trim().replace(/['\"]/g, '')).slice(0, 8);\n      }\n\n      return { success: true, synonyms };\n    } catch (error) {\n      throw new Error(`Synonyms failed: ${error.message}`);\n    }\n  }\n\n  async humanizeText(text) {\n    if (!this.genAI) {\n      throw new Error('API key not set');\n    }\n\n    const prompt = `Make the following AI-generated text sound more natural and human-written by:\n    1. Adding natural flow and rhythm\n    2. Including subtle imperfections that humans naturally have\n    3. Making it more conversational and relatable\n    4. Removing overly formal or robotic language\n    \n    Text: \"${text}\"`;\n\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      return { success: true, result: response.text() };\n    } catch (error) {\n      throw new Error(`Humanization failed: ${error.message}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}