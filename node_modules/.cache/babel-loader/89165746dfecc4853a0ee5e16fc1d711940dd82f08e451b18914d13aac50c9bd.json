{"ast":null,"code":"var _jsxFileName = \"/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/components/Paraphraser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { geminiService } from '../services/geminiAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paraphraser = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [result, setResult] = useState('');\n  const [mode, setMode] = useState('Standard');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const modes = ['Formal', 'Academic', 'Simple', 'Creative', 'Shorten', 'Expand'];\n  const handleParaphrase = async () => {\n    if (!text.trim()) return;\n    setLoading(true);\n    setError('');\n    try {\n      const response = await geminiService.paraphraseText(text, mode);\n      if (response.success) {\n        setResult(response.result);\n      }\n    } catch (error) {\n      setError('Failed to paraphrase: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDD04 Smart Paraphraser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Paraphrasing Mode:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: mode,\n        onChange: e => setMode(e.target.value),\n        className: \"mode-select\",\n        children: modes.map(m => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: m,\n          children: m\n        }, m, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Enter text to paraphrase...\",\n      className: \"text-area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleParaphrase,\n      disabled: loading || !text.trim(),\n      className: \"button\",\n      children: loading ? 'Paraphrasing...' : 'Paraphrase Text'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Paraphrased Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Paraphraser, \"2M9lJiY+hTSxIgMD+FMq9fBeerk=\");\n_c = Paraphraser;\nexport default Paraphraser;\nvar _c;\n$RefreshReg$(_c, \"Paraphraser\");","map":{"version":3,"names":["React","useState","geminiService","jsxDEV","_jsxDEV","Paraphraser","_s","text","setText","result","setResult","mode","setMode","loading","setLoading","error","setError","modes","handleParaphrase","trim","response","paraphraseText","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","m","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/euclidstellar/Desktop/gun_quill/ai-writing-assistant/src/components/Paraphraser.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { geminiService } from '../services/geminiAPI';\n\nconst Paraphraser = () => {\n  const [text, setText] = useState('');\n  const [result, setResult] = useState('');\n  const [mode, setMode] = useState('Standard');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const modes = ['Formal', 'Academic', 'Simple', 'Creative', 'Shorten', 'Expand'];\n\n  const handleParaphrase = async () => {\n    if (!text.trim()) return;\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      const response = await geminiService.paraphraseText(text, mode);\n      if (response.success) {\n        setResult(response.result);\n      }\n    } catch (error) {\n      setError('Failed to paraphrase: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"component\">\n      <h2>ðŸ”„ Smart Paraphraser</h2>\n      \n      <div className=\"mode-selector\">\n        <label>Paraphrasing Mode:</label>\n        <select \n          value={mode} \n          onChange={(e) => setMode(e.target.value)}\n          className=\"mode-select\"\n        >\n          {modes.map(m => (\n            <option key={m} value={m}>{m}</option>\n          ))}\n        </select>\n      </div>\n\n      <textarea\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        placeholder=\"Enter text to paraphrase...\"\n        className=\"text-area\"\n      />\n\n      <button \n        onClick={handleParaphrase}\n        disabled={loading || !text.trim()}\n        className=\"button\"\n      >\n        {loading ? 'Paraphrasing...' : 'Paraphrase Text'}\n      </button>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      {result && (\n        <div className=\"results\">\n          <h3>Paraphrased Text:</h3>\n          <p>{result}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Paraphraser;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}